function showModalWithCancel(message, input = false, callback = null, cancelCallback = null) {
    const modal = document.createElement('div');
    modal.className = 'modal';
    modal.innerHTML = `
        <div class="modal-content">
            <p>${message}</p>
            ${input ? '<textarea id="modalInput"></textarea>' : ''}
            <div class="modal-buttons">
                <button id="modalCancelButton" class="cancel-btn">–û—Ç–º–µ–Ω–∞</button>
                <button id="modalOkButton" class="ok-btn">OK</button>
            </div>
        </div>
    `;
    document.body.appendChild(modal);

    const modalInput = document.getElementById('modalInput');
    const cancelButton = document.getElementById('modalCancelButton');
    const okButton = document.getElementById('modalOkButton');

    cancelButton.addEventListener('click', () => {
        if (cancelCallback) cancelCallback();
        document.body.removeChild(modal);
    });

    okButton.addEventListener('click', () => {
        if (input && callback) {
            callback(modalInput.value);
        } else if (callback) {
            callback();
        }
        document.body.removeChild(modal);
    });
}

async function checkDatabaseStatus() {
    try {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –Ω–∞ 2 —Å–µ–∫—É–Ω–¥—ã
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), 2000);

        const response = await fetch('http://localhost:5000/db-status', { signal: controller.signal });
        clearTimeout(timeoutId);

        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è');

        const data = await response.json();
        if (data.status !== 'connected') {
            console.warn('‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∫–ª—é—á–µ–Ω–∞. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ.');
            showModalWithCancel('‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
            return false;
        }

        return true;
    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º:', err);
        showModalWithCancel('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        return false;
    }
}

document.addEventListener('DOMContentLoaded', async () => {
    if (!(await checkDatabaseStatus())) return;

    const token = localStorage.getItem('token');
    if (!token) {
        showModalWithCancel('–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞...', false, () => {
            window.location.href = 'login.html';
        });
        return;
    }

    const postContainer = document.getElementById('postContainer');
    const commentsContainer = document.getElementById('commentsContainer');
    const commentForm = document.getElementById('commentForm');
    const commentContent = document.getElementById('commentContent');
    const urlParams = new URLSearchParams(window.location.search);
    const postId = urlParams.get('postId');

    document.getElementById('commentForm').addEventListener('submit', async (e) => {
        e.preventDefault();
        const content = document.getElementById('commentContent').value.trim();

        if (!content) {
            showModalWithCancel('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.');
            return;
        }

        // ‚úÖ –ü–æ–ª—É—á–∞–µ–º post_id –∏–∑ URL (–≤–∞–∂–Ω–æ!)
        const urlParams = new URLSearchParams(window.location.search);
        const postId = urlParams.get('postId');

        if (!postId) {
            showModalWithCancel('–û—à–∏–±–∫–∞: ID –ø–æ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.');
            return;
        }

        try {
            const response = await fetch('http://localhost:5000/comments/create', { // ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º post_id
                method: 'POST',
                headers: {
                    Authorization: `Bearer ${localStorage.getItem('token')}`,
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ post_id: postId, content }) // ‚úÖ –ü–µ—Ä–µ–¥–∞—ë–º post_id –≤ –∑–∞–ø—Ä–æ—Å–µ
            });

            if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è');

            showModalWithCancel('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.', false, () => location.reload());
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:', err);
            showModalWithCancel('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.');
        }
    });

    if (!postId) {
        showModalWithCancel('ID –ø–æ—Å—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω.');
        return;
    }

    let currentUser = null;

    const loadCurrentUser = async () => {
        try {
            const response = await fetch('http://localhost:5000/auth/user', {
                headers: { Authorization: `Bearer ${token}` },
            });
            if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
            currentUser = await response.json();
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', err);
            showModalWithCancel('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.');
        }
    };

    const loadPostAndComments = async () => {
        try {
            const response = await fetch(`http://localhost:5000/posts/${postId}`, {
                headers: { Authorization: `Bearer ${token}` },
            });

            if (!response.ok) throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ—Å—Ç');

            const { post, comments } = await response.json();

            postContainer.innerHTML = `
                <h2>${post.title}</h2>
                <p>${post.content}</p>
                <p>–£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç: ${post.university?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç'}</p>
                <p>–ê–≤—Ç–æ—Ä: ${post.author.nickname || post.author.username}</p>
                <small>–°–æ–∑–¥–∞–Ω: ${new Date(post.createdAt).toLocaleString()}</small>
            `;

            commentsContainer.innerHTML = '';
            comments.forEach((comment) => {
                const isAuthor = comment.author_id._id === currentUser._id;
                const commentCard = document.createElement('div');
                commentCard.className = 'comment-card';
                commentCard.innerHTML = `
                    <p>${comment.content}</p>
                    <p class="comment-author">–ê–≤—Ç–æ—Ä: ${comment.author_id.nickname || comment.author_id.username}</p>
                    <p class="comment-date">${new Date(comment.createdAt).toLocaleString()}</p>
                    <p>–õ–∞–π–∫–æ–≤: <span class="likes-count" data-id="${comment._id}">${comment.likes.length}</span></p>
                    <button class="like-comment" data-id="${comment._id}">‚ù§Ô∏è</button>
                    <button class="view-replies" data-comment-id="${comment._id}" data-post-id="${postId}">
                        üí¨ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–≤–µ—Ç—ã
                    </button>

                    ${
                    isAuthor
                        ? `<div class="comment-actions">
                                <button class="edit-btn" data-id="${comment._id}" data-content="${comment.content}">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</button>
                                <button class="delete-btn" data-id="${comment._id}">–£–¥–∞–ª–∏—Ç—å</button>
                               </div>`
                        : ''
                }
                `;
                commentsContainer.appendChild(commentCard);
            });
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ—Å—Ç–∞ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:', err);
            showModalWithCancel('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.');
        }
    };

    const API_BASE_URL = 'http://localhost:5000'; // üëà –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–π URL


    commentsContainer.addEventListener('click', async (e) => {
        if (e.target.classList.contains('like-comment')) {
            const commentId = e.target.dataset.id;

            console.log(`üî• –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ª–∞–π–∫: ${API_BASE_URL}/comments/${commentId}/toggle-like`);

            try {
                const response = await fetch(`${API_BASE_URL}/comments/${commentId}/toggle-like`, { // üëà –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–π URL
                    method: 'POST',
                    headers: { Authorization: `Bearer ${localStorage.getItem('token')}` },
                });

                if (!response.ok) {
                    const text = await response.text(); // –ß–∏—Ç–∞–µ–º –æ—Ç–≤–µ—Ç –∫–∞–∫ —Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –æ—à–∏–±–∫—É
                    throw new Error(`–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${text}`);
                }

                const { likesCount, liked } = await response.json();

                // –û–±–Ω–æ–≤–ª—è–µ–º –ª–∞–π–∫–∏
                const likesCountElement = document.querySelector(`.likes-count[data-id="${commentId}"]`);
                if (likesCountElement) {
                    likesCountElement.textContent = likesCount;
                }

                // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å—Ç–∏–ª—å –∫–Ω–æ–ø–∫–∏
                e.target.classList.toggle('liked', liked);

                console.log(`‚úÖ –õ–∞–π–∫ –æ–±–Ω–æ–≤–ª–µ–Ω: ${likesCount} –ª–∞–π–∫–æ–≤`);
            } catch (err) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–∞–π–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:', err);
                showModalWithCancel(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å –ª–∞–π–∫: ${err.message}`);
            }
        }


        if (e.target.classList.contains('view-replies')) {
            const postId = e.target.dataset.postId;
            const commentId = e.target.dataset.commentId;
            window.location.href = `replies_view.html?postId=${postId}&commentId=${commentId}`;
        }

        if (e.target.classList.contains('edit-btn')) {
            const commentId = e.target.dataset.id;
            const currentContent = e.target.dataset.content;

            showModalWithCancel('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:', true, async (newContent) => {
                if (!newContent.trim()) {
                    showModalWithCancel('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.');
                    return;
                }

                try {
                    const response = await fetch(`http://localhost:5000/comments/${commentId}`, {
                        method: 'PUT',
                        headers: {
                            Authorization: `Bearer ${token}`,
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ content: newContent }),
                    });

                    if (!response.ok) {
                        const error = await response.json();
                        throw new Error(error.error || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è');
                    }

                    showModalWithCancel('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω.', false, loadPostAndComments);
                } catch (err) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:', err);
                    showModalWithCancel('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.');
                }
            });
        }

        if (e.target.classList.contains('delete-btn')) {
            const commentId = e.target.dataset.id;

            showModalWithCancel('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π?', false, async () => {
                try {
                    const response = await fetch(`http://localhost:5000/comments/${commentId}`, {
                        method: 'DELETE',
                        headers: { Authorization: `Bearer ${token}` },
                    });

                    if (!response.ok) {
                        const error = await response.json();
                        throw new Error(error.error || '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.');
                    }

                    showModalWithCancel('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.', false, loadPostAndComments);
                } catch (err) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:', err);
                    showModalWithCancel('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.');
                }
            });
        }
    });

    await loadCurrentUser();
    await loadPostAndComments();
});
