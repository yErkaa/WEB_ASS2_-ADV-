document.addEventListener("DOMContentLoaded", async () => {
    console.log("‚úÖ –°–∫—Ä–∏–ø—Ç ratings.js –∑–∞–≥—Ä—É–∂–µ–Ω!");

    let barChart, detailedChart, pieChart; // üëà –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
    const select = document.getElementById("universityFilter");


    try {
        const response = await fetch("http://localhost:5000/universities/ratings");
        if (!response.ok) throw new Error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö");

        const universities = await response.json();
        console.log("‚úÖ –î–∞–Ω–Ω—ã–µ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–æ–≤:", universities);

        const postsResponse = await fetch("http://localhost:5000/posts/get");
        if (!postsResponse.ok) throw new Error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å—Ç–æ–≤");

        const posts = await postsResponse.json();
        console.log("‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–æ–≤:", posts);

        select.innerHTML = "";

        universities.forEach(u => {
            const option = document.createElement("option");
            option.value = u._id;
            option.textContent = u.name;
            select.appendChild(option);
        });


        // üìä –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–æ–≤
        function calculateAvgRatings() {
            return universities.map(u => {
                const ratings = posts.filter(p => p.university?._id === u._id || p.university === u._id);
                const avg = ratings.length ? (ratings.reduce((sum, p) => sum + p.rating, 0) / ratings.length).toFixed(1) : 0;
                return avg;
            });
        }

        const maxLabelLength = 15; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏—è
        const shortenedLabels = universities.map(u =>
            u.name.length > maxLabelLength ? u.name.substring(0, maxLabelLength) + "..." : u.name
        );
        const fullLabels = universities.map(u => u.name); // –ü–æ–ª–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è —Ç—É–ª—Ç–∏–ø–æ–≤
        let avgRatings = calculateAvgRatings();

        function createBarChart() {
            if (barChart) barChart.destroy(); // –£–Ω–∏—á—Ç–æ–∂–∞–µ–º —Å—Ç–∞—Ä—ã–π –≥—Ä–∞—Ñ–∏–∫ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ

            barChart = new Chart(document.getElementById("barChart"), {
                type: "bar",
                data: {
                    labels: shortenedLabels, // –°–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–æ–≤
                    datasets: [{
                        label: "–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥",
                        data: avgRatings,
                        backgroundColor: "rgba(40, 167, 69, 0.8)",
                        borderColor: "rgba(40, 167, 69, 1)",
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        tooltip: {
                            callbacks: {
                                title: function(tooltipItem) {
                                    return fullLabels[tooltipItem[0].dataIndex]; // –ü–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞
                                }
                            }
                        },
                        datalabels: {
                            anchor: 'end', // –ü–æ–¥–ø–∏—Å—å —Å–≤–µ—Ä—Ö—É –∫–æ–ª–æ–Ω–æ–∫
                            align: 'top',
                            formatter: (value) => value, // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á–∏—Å–ª–æ
                            color: 'black',
                            font: {
                                weight: 'bold',
                                size: 12
                            }
                        }
                    },
                    scales: {
                        x: {
                            ticks: {
                                font: {
                                    size: 10 // –£–º–µ–Ω—å—à–∞–µ–º —à—Ä–∏—Ñ—Ç –ø–æ–¥–ø–∏—Å–µ–π –æ—Å–∏ X
                                },
                                callback: function(value, index) {
                                    return shortenedLabels[index]; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
                                }
                            }
                        },
                        y: {
                            beginAtZero: true,
                            max: 5,
                            stepSize: 1,

                        }
                    }
                },
                plugins: [ChartDataLabels] // –í–∫–ª—é—á–∞–µ–º –ø–ª–∞–≥–∏–Ω –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–µ–π
            });
        }


        // üìä –ì—Ä–∞—Ñ–∏–∫ –æ—Ü–µ–Ω–æ–∫ 1-5
        function createDetailedChart() {
            if (detailedChart) detailedChart.destroy();

            detailedChart = new Chart(document.getElementById("detailedChart"), {
                type: "bar",
                data: {
                    labels: ["1‚≠ê", "2‚≠ê", "3‚≠ê", "4‚≠ê", "5‚≠ê"],
                    datasets: [{ label: "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤", data: [0, 0, 0, 0, 0], backgroundColor: "rgba(40, 167, 69, 0.8)" }]
                },
                options: { responsive: true, scales: { y: { beginAtZero: true } } }
            });
        }

        // üîÑ –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—É
        function updateDetailedChart(universityId) {
            const reviews = posts.filter(p => p.university?._id === universityId || p.university === universityId);
            const ratingsCount = [0, 0, 0, 0, 0];

            reviews.forEach(p => ratingsCount[p.rating - 1]++);

            detailedChart.data.datasets[0].data = ratingsCount;
            detailedChart.update();
        }
        function createPieChart() {
            if (pieChart) pieChart.destroy();

            pieChart = new Chart(document.getElementById("pieChart"), {
                type: "doughnut",
                data: {
                    labels: ["–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ", "–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ"],
                    datasets: [{
                        data: [
                            posts.filter(p => p.rating >= 4).length,
                            posts.filter(p => p.rating <= 2).length
                        ],
                        backgroundColor: ["rgba(40, 167, 69, 0.8)", "rgba(220, 53, 69, 0.8)"],
                        borderColor: ["rgba(40, 167, 69, 1)", "rgba(220, 53, 69, 1)"],
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: "top",
                            labels: {
                                font: { size: 12 }
                            }
                        }
                    }
                }
            });
        }

        createBarChart();
        createDetailedChart();
        createPieChart();


// üìå –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç
        if (universities.length > 0) {
            select.value = universities[0]._id; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–≤—ã–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç
            updateDetailedChart(universities[0]._id); // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–µ–≥–æ
        }


        // ‚úÖ –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç
        if (universities.length > 0) {
            updateDetailedChart(universities[0]._id);
        }
        // üìå –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ —Å–º–µ–Ω–µ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞
        select.addEventListener("change", () => {
            updateDetailedChart(select.value);
        });

        console.log("üìä –°—Ä–µ–¥–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∏ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–æ–≤:", avgRatings);


    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–π—Ç–∏–Ω–≥–æ–≤:", error);
    }
});
