const express = require('express');
const mongoose = require('mongoose');
const Comment = require('../models/Comment');
const Post = require('../models/Post');
const authMiddleware = require('../middleware/authMiddleware'); // Middleware –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
const Reply = require('../models/Reply'); // üëà –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥–µ–ª—å

const router = express.Router();
const ObjectId = mongoose.Types.ObjectId;

router.get('/:post_id', async (req, res) => {
    try {
        const { post_id } = req.params;

        if (!mongoose.Types.ObjectId.isValid(post_id)) {
            return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ—Å—Ç–∞' });
        }

        if (!ObjectId.isValid(post_id)) {
            return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ—Å—Ç–∞' });
        }

        const comments = await Comment.find({ post_id })
            .populate('author_id', 'nickname username avatar')
            .sort({ createdAt: -1 });

        const formattedComments = comments.map(comment => ({
            ...comment.toObject(),
            repliesCount: comment.repliesCount || 0  // ‚úÖ –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –ø–æ–ª–µ –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è
        }));

        res.json(formattedComments);
        res.json(comments);
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:', err.message);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤' });
    }
});

router.post('/create', authMiddleware, async (req, res) => {
    const { post_id, content } = req.body;

    if (!post_id || !content) {
        console.error('–û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.');
        return res.status(400).json({ error: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è' });
    }

    try {
        const post = await Post.findById(post_id);
        if (!post) {
            console.error('–û—à–∏–±–∫–∞: –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.');
            return res.status(404).json({ error: '–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        const comment = new Comment({
            post_id,
            content,
            author_id: req.user.id,
        });

        await comment.save();
        console.log('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω:', comment);
        res.status(201).json({ message: '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω', comment });
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:', err.message);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});


router.put('/:id', authMiddleware, async (req, res) => {
    try {
        const { id } = req.params;
        const { content } = req.body;

        if (!ObjectId.isValid(id)) {
            return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è' });
        }

        const comment = await Comment.findById(id);
        if (!comment) {
            return res.status(404).json({ error: '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        if (comment.author_id.toString() !== req.user.id) {
            return res.status(403).json({ error: '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π' });
        }

        comment.content = content;
        await comment.save();

        res.json({ message: '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω', comment });
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:', err.message);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

router.delete('/:id', authMiddleware, async (req, res) => {
    try {
        const { id } = req.params;
        console.log('–ó–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —Å ID:', id);

        if (!ObjectId.isValid(id)) {
            return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID' });
        }

        const comment = await Comment.findById(id);
        if (!comment) {
            return res.status(404).json({ error: '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        console.log('ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–æ–∫–µ–Ω–∞:', req.user.id);
        console.log('ID –∞–≤—Ç–æ—Ä–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:', comment.author_id.toString());

        if (comment.author_id.toString() !== req.user.id) {
            return res.status(403).json({ error: '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —ç—Ç–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è' });
        }

        await Comment.deleteOne({ _id: id });
        res.json({ message: '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω' });
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:', err);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

router.post('/:commentId/toggle-like', authMiddleware, async (req, res) => {
    try {
        const { commentId } = req.params;
        const userId = req.user._id;


        console.log(` –ó–∞–ø—Ä–æ—Å –Ω–∞ –ª–∞–π–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: /comments/${commentId}/toggle-like`);

        if (!mongoose.Types.ObjectId.isValid(commentId)) {
            console.error('‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è');
            return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è' });
        }

        const comment = await Comment.findById(commentId);
        if (!comment) {
            console.error('‚ùå –û—à–∏–±–∫–∞: –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return res.status(404).json({ error: '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        const likeIndex = comment.likes.indexOf(userId);
        if (likeIndex === -1) {
            comment.likes.push(userId);
            console.log('‚úÖ –õ–∞–π–∫ –¥–æ–±–∞–≤–ª–µ–Ω');
        } else {
            comment.likes.splice(likeIndex, 1);
            console.log('‚úÖ –õ–∞–π–∫ —É–¥–∞–ª–µ–Ω');
        }

        await comment.save();
        res.json({ likesCount: comment.likes.length, liked: likeIndex === -1 });

    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–∞–π–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:', err);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

router.get('/comment/:commentId', async (req, res) => {
    try {
        const { commentId } = req.params;
        console.log(` –ó–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: ${commentId}`);


        if (!mongoose.Types.ObjectId.isValid(commentId)) {
            console.log(`‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID: ${commentId}`);

            return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è' });
        }

        const comment = await Comment.findById(commentId).populate('author_id', 'nickname username avatar');

        if (!comment) {
            console.log(`‚ö†Ô∏è –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ: ${commentId}`);

            return res.status(404).json({ error: '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:`, comment);

        res.json(comment);
    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:', err);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});


module.exports = router;