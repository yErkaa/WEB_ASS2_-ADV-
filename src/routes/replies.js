const express = require('express');
const Reply = require('../models/Reply');
const authMiddleware = require('../middleware/authMiddleware');
const mongoose = require('mongoose');

const router = express.Router();

router.post('/comment/:commentId/reply', authMiddleware, async (req, res) => {
    try {
        const { content, postId } = req.body;
        const { commentId } = req.params;
        const userId = req.user.id;

        if (!content) {
            return res.status(400).json({ error: '–û—Ç–≤–µ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º' });
        }

        if (!mongoose.Types.ObjectId.isValid(commentId) || !mongoose.Types.ObjectId.isValid(postId)) {
            return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID' });
        }

        const reply = new Reply({
            postId,
            commentId,
            authorId: userId,
            content,
        });

        await reply.save();
        res.status(201).json(reply);
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞:', err);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

router.get('/comment/:commentId', async (req, res) => {
    try {
        const { commentId } = req.params;
        console.log(`üî• –ó–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: ${commentId}`);

        if (!mongoose.Types.ObjectId.isValid(commentId)) {
            return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID' });
        }

        const replies = await Reply.find({ commentId: new mongoose.Types.ObjectId(commentId) })
            .populate('authorId', 'nickname username avatar');

        if (!replies.length) {
            console.log(`‚ö†Ô∏è –û—Ç–≤–µ—Ç–æ–≤ –Ω–µ—Ç –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è ${commentId}`);
        } else {
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${replies.length} –æ—Ç–≤–µ—Ç–æ–≤`);
        }

        res.json(replies);
    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤:', err);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});




router.post('/:replyId/toggle-like', authMiddleware, async (req, res) => {
    try {
        const { replyId } = req.params;
        const userId = req.user._id;

        const reply = await Reply.findById(replyId);
        if (!reply) return res.status(404).json({ error: '–û—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });

        const likeIndex = reply.likes.indexOf(userId);
        if (likeIndex === -1) {
            reply.likes.push(userId);
        } else {
            reply.likes.splice(likeIndex, 1);
        }

        await reply.save();
        res.json({ likesCount: reply.likes.length, liked: likeIndex === -1 });
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–∞–π–∫–µ –æ—Ç–≤–µ—Ç–∞:', err);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

router.put('/:replyId', authMiddleware, async (req, res) => {
    try {
        const { replyId } = req.params;
        const { content } = req.body;

        if (!mongoose.Types.ObjectId.isValid(replyId)) {
            return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –æ—Ç–≤–µ—Ç–∞' });
        }

        const reply = await Reply.findById(replyId);
        if (!reply) {
            return res.status(404).json({ error: '–û—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        if (reply.authorId.toString() !== req.user.id) {
            return res.status(403).json({ error: '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –æ—Ç–≤–µ—Ç' });
        }

        reply.content = content;
        await reply.save();

        res.json({ message: '–û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω', reply });
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞:', err.message);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

router.delete('/:replyId', authMiddleware, async (req, res) => {
    try {
        const { replyId } = req.params;

        if (!mongoose.Types.ObjectId.isValid(replyId)) {
            return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID' });
        }

        const reply = await Reply.findById(replyId);
        if (!reply) {
            return res.status(404).json({ error: '–û—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        if (reply.authorId.toString() !== req.user.id) {
            return res.status(403).json({ error: '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –æ—Ç–≤–µ—Ç' });
        }

        await Reply.deleteOne({ _id: replyId });

        res.json({ message: '–û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω' });
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞:', err);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

module.exports = router;
